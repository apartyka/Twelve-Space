@import "variables";

/* ==========================================================================
   Grids / Twelve-Space Structure System [v0.3.1]
   ========================================================================== */
/*!
 * Twelve-Space Structure System v0.3.1
 * Created by Kevin Mack
 * http://stash/users/kmack/repos/twelve-space
 *
 * Date: 2013-11-04
 */


/**
 * Z-Index for Absolute and Relative Positions
 * Used for layering
 */

.position-relative {
	position: relative;
}

.position-absolute {
	position: absolute;
}

.position, .position--1 {
	z-index: 1;
}

.overflow-hidden {
	overflow: hidden;
}

.overflow-hidden--x {
	overflow-x: hidden;
}

.overflow-hidden--y {
	overflow-y: hidden;
}

@for $i from 0 through 12 {
	.position-relative--#{$i} {
		@extend .position-relative;
		z-index: $i;
	}
}

@for $i from 0 through 12 {
	.position-absolute--#{$i} {
		@extend .position-absolute;
		z-index:  $i;
	}
}

%grid {
	> .grid__cell {
		&:nth-child(odd) {
			float: left;
		}
		&:nth-child(even) {
			float: right;
		}
	}
}

/**
 * Image Height Disfactor!
 * Make an `<img />` not be the deciding factor of height
 * Usage:
```
   	<div class="overflow-control">
   		<div class="grid__cell overflow-control__wrapper">
   			<img class="overflow-control__wrapper__image" src="http://placehold.it/100x150" />
   		</div>
   	</div>
```
 * Pre fixed with "ns-" follow namespacing and inheritance path of:
```
   	<div class="ns-overflow-control"> <!-- Must follow path of ns-overflow-control > class*="grid__cell" > img -->
   		<div class="grid__cell">  <!-- Any combo of `class*="grid__cell"` -->
   			<img src="http://placehold.it/100x150" /> <!-- This gets the treatment -->
   		</div>
   	</div>
```
 */

.overflow-control, .ns-overflow-control {
	@extend .overflow-hidden--y;
}

.ns-overflow-control {
	> div {
		@extend .position-relative;
		> img {
			@extend .position-absolute;
		}
	}
}

.overflow-control__wrapper {
	@extend .position-relative;
}

.overflow-control__wrapper__image {
	@extend .position-absolute;
}


/**
 * Grid
 * Inherits `%grid` properties
 * **nth-child(1n)** is `float: left` and **nth-child(2n)** is `float: right`
 */

.grid {
	@extend %grid;
}


/**
 * Image Widths
 * `.grid__cell--asset` and `.asset-container` make children `<img />` width equal to "100%"
 */

img.full  {
	display: block;
}

%cell-child--full {
	.full {
		width: 100%;
	}
}

.grid__cell--asset, .asset-container {
	@extend %cell-child--full;
	img {
		@extend img.full;
		width: 100%;
	}
}

.grid, .grid--12 {
	@extend %cell-child--full;
}


/*
 * ## Clear Floats
 */
.clear, .grid__row, .grid--table__row {
	clear: both;
}

%clear-after {
	&:after {
		display: table;
		clear: both;
		content: "";
	}
}

%float--left-or-right {
	> .grid__cell--left {
		float: left;
	}
	> .grid__cell--right {
		float: right;
	}
}

%float-left {
	float: left;
}

%display-table-cell {
	display: table-cell
}

%display-table {
 	display: table;
}

.grid--table, .grid--table--12, .grid--table__row {
	@extend %display-table;
	width: 100%;
}

%float--cell--left {
	> .grid__cell, .grid__row > .grid__cell {
		@extend %float-left;
	}
}

%display-cell--table-cell {
	> .grid__cell {
		@extend %display-table-cell;
	}
}

/*
 * "Equal Columns"
 * Clears on #nth-child+1 for even rows
 */

@for $i from 1 through 12 {
	.grid--equal--#{$i} {
		@extend %clear-after;
		@extend %float--left-or-right;
		@extend  %float--cell--left;
		@extend %cell-child--full;
		> [class*="grid__cell"] {
			width: percentage( 1 / $i );
			// Clear for equal grid/column heights:
			&:nth-child(#{$i}n+1) {
				clear: both;
			}
		}
	}
}


/**
 * Equal heights for any parent class that has `grid` in it
 */

.grid, .grid--12, .float-container, .grid__row {
	@extend  %float--left-or-right;
}

.float-container, .grid--12, .grid__row {
	@extend %float--cell--left;
}

.grid--table--12, .grid--table__row {
	@extend %display-cell--table-cell;
}

.grid, .grid--12 {
	@extend  %clear-after;
}

@mixin generate-grid-expand( $grid__cell-amount: 1, $grid-offset-value: 1, $element-name: "expand", $property: "width", $block-name: "grid__cell", $grid-column-quanity: 12 ) {
	$class-name: $block-name + "--" + $grid__cell-amount + "__" + $element-name + "--" + $grid-offset-value;
	.#{$class-name} {
		#{$property}: percentage( 1 + ($grid-offset-value / $grid__cell-amount) );
	}
	// OUTPUT: .grid__cell--{cell spaces}__expand--{cell spaces}
}

@mixin generate-grid__cell-offset( $grid__cell-amount: 1, $grid-offset-value: 1, $element-name: "expand", $property: "width", $positiveOrNegative: 1, $block-name: "grid__cell", $grid-column-quanity: 12 ) {
	$class-name: $block-name + "__" + $element-name + "--" + $grid-offset-value;
	.#{$class-name} {
		#{$property}:  percentage(($grid-offset-value / $grid-column-quanity)) * $positiveOrNegative;
	}
	// OUTPUT: .grid__cell--offset--{cell spaces}
	// OUTPUT: .grid__cell--offset--negative--{cell spaces}
}

@mixin generate-grid__cell__offset( $grid__cell-amount: 1, $grid-offset-value: 1, $element-name: "expand", $property: "width", $positiveOrNegative: 1, $block-name: "grid__cell", $grid-column-quanity: 12 ) {
	$class-name: $block-name + "--" + $grid__cell-amount +  "__" + $element-name + "--" + $grid-offset-value;
	.#{$class-name} {
		#{$property}: percentage(  ($grid-offset-value / $grid__cell-amount) ) * -1;
	}
	// OUTPUT: .grid__cell--{cell spaces}__offset--{cell spaces}
	// OUTPUT: .grid__cell--{cell spaces}__offset--native--{cell spaces}
}


@for $i from 1 through 12 {
	@for $x from 1 through 12 {
		@include generate-grid-expand($i, $x);
	}
}

@for $i from 1 through 12 {
	@for $x from 1 through 12 {
		@include generate-grid__cell__offset($i, $x, "offset", "margin-right", -1, "grid__cell", 12 );
	}
}

@for $i from 1 through 12 {
	@include generate-grid__cell-offset(1, $i, "cell--offset", "margin-left", 1, "grid", 12 );
}

@for $i from 1 through 12 {
	@include generate-grid__cell-offset(1, $i, "cell--offset--negative", "margin-left", -1, "grid", 12 );
}

@for $i from 1 through 12 {
	@for $x from 1 through 12 {
		@include generate-grid__cell__offset($i, $x, "offset--negative", "margin-left", -1, "grid__cell", 12 );
	}
}

@for $i from 1 through 12 {
	.grid__cell--#{$i} {
		// @extend  %float-left;
		width: percentage( $i / 12);
	}
}
@for $i from 1 through 12 {
	.grid--12 > .grid__cell--#{$i} {
		@extend %float-left;
	}
}
@for $i from 1 through 12 {
	.grid--table--12 > .grid__cell--#{$i}, .grid--table__row > .grid__cell--#{$i} {
		@extend %display-table-cell;
	}
}


@for $i from 1 through 12 {
	.grid__space--left--#{$i} {
		margin-left: percentage( $i / 12);
	}
}

@for $i from 1 through 12 {
	.grid__space--right--#{$i} {
		margin-right: percentage( $i / 12);
	}
}

